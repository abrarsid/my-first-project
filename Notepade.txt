package com.company;
import javax.swing.*;
import javax.swing.text.StyledEditorKit;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowEvent;
import java.awt.event.WindowListener;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
public class Main implements ActionListener,WindowListener {
    JFrame jFrame,font_frame;
    JMenuBar jb;
    JMenu file, edit, view, format, help;
    JMenuItem neww, open, save, saveAs, exit,cut,copy,paste,font,font_color,backgroundColor,wordwrap;
    JTextArea jt;
    File files = null;
    JComboBox font_family,font_size,font_style;
    JButton ok;
    Main() {

        try
        {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        }
        catch (Exception e)
        {
           System.out.println(e);
        }

        jFrame = new JFrame("*Untiled*-Notepad");
        jFrame.setSize(500, 500);
        jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        jFrame.setLocationRelativeTo(null);

        jt = new JTextArea();

        jb = new JMenuBar();
        file = new JMenu("File");
        edit = new JMenu("Edit");
        view = new JMenu("View");
        format = new JMenu("Format");
        help = new JMenu("Help");

        neww = new JMenuItem("New");
        neww.addActionListener(this);
        open = new JMenuItem("Open");
        open.addActionListener(this);
        save = new JMenuItem("Save");
        save.addActionListener(this);
        saveAs = new JMenuItem("Save As..");
        saveAs.addActionListener(this);
        exit = new JMenuItem("Exit");
        exit.addActionListener(this);
        cut=new JMenuItem("cut");
        cut.addActionListener(this);
        copy=new JMenuItem("Copy");
        copy.addActionListener(this);
        paste=new JMenuItem("Paste");
        paste.addActionListener(this);
        wordwrap=new JMenuItem("Ward Wrap");
        wordwrap.addActionListener(this);
        font=new JMenuItem("Font");
        font.addActionListener(this);
        font_color=new JMenuItem("Font_color");
        font_color.addActionListener(this);
        backgroundColor = new JMenuItem("Background Color");
        backgroundColor.addActionListener(this);


        JScrollPane sc = new JScrollPane(jt);
        sc.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
        sc.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);


        jFrame.add(sc);
        jb.add(file);
        file.add(neww);
        file.add(open);
        file.add(save);
        file.add(saveAs);
        file.add(exit);
        jb.add(edit);
        edit.add(cut);
        edit.add(copy);
        edit.add(paste);
        jb.add(view);
        jb.add(format);
        format.add(wordwrap);
        format.add(font);
        format.add(font_color);
        format.add(backgroundColor);
        jb.add(help);


        jFrame.addWindowListener(this);
        jFrame.setJMenuBar(jb);
        jFrame.setVisible(true);


    }

    public static void main(String[] args) {
        // write your code here
        new Main();
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == neww) {
          String text=jt.getText();
          if (!text.equals(""))
          {
              int i=JOptionPane.showConfirmDialog(jFrame,"Do you want to save this file ?");
              if (i==0)
              {
                  saveAsfile();
                  jt.setText("");
                  jFrame.setTitle("*Untiled*-Notepad");
              }
              else if(i==1)
              {
                  jt.setText("");
              }
          }

        }
        if (e.getSource() == open) {
            openFile();
        }
        if (e.getSource()==save)
        {
            saveFile();
        }
        if (e.getSource()==saveAs)
        {
            saveAsfile();
        }
        if (e.getSource()==exit)
        {
            System.exit(0);
        }
        if(e.getSource()==cut)
        {
            jt.cut();
        }
        if (e.getSource()==copy)
        {
            jt.copy();
        }
        if (e.getSource()==paste)
        {
            jt.paste();
        }
        if (e.getSource()==font)
        {
            fontfile();
        }
        if (e.getSource()==ok)
        {
            fontopenfile();
        }
        if (e.getSource()==font_color)
        {
            Color c=JColorChooser.showDialog(jFrame,"Choose font color",Color.BLACK);
            jt.setForeground(c);
        }
        if (e.getSource()==backgroundColor)
        {
            Color color=JColorChooser.showDialog(jFrame,"Choose background color",Color.white);
            jt.setBackground(color);
        }
    }
    void openFile()

    {
        JFileChooser fileChooser = new JFileChooser();
        int result = fileChooser.showSaveDialog(jFrame);
        if (result == 0) {
            jt.setText("");
            files = fileChooser.getSelectedFile();
            jFrame.setTitle(fileChooser.getName());
            try (FileInputStream fileInputStream = new FileInputStream(files)) {
                int i;
                while ((i = fileInputStream.read()) != -1) {
                    jt.append(String.valueOf((char) i));
                }
            } catch (IOException ee) {
                ee.printStackTrace();
            }

        }
    }
    void saveFile()
    {

       String title=jFrame.getTitle();

       if (title.equals("*Untiled*-Notepad"))
       {
           saveAsfile();
       }
       else {
           String text = jt.getText();
           try (FileOutputStream fileOutputStream = new FileOutputStream(files)) {
               byte[] b = text.getBytes();
               fileOutputStream.write(b);
           } catch (Exception ee) {
               ee.printStackTrace();
           }
       }

    }

    void saveAsfile()
    {
        JFileChooser fileChooser=new JFileChooser();
        int result=fileChooser.showSaveDialog(jFrame);
        if (result==0)
        {
            String text=jt.getText();
            files=fileChooser.getSelectedFile();
            jFrame.setTitle(fileChooser.getName());
            try(FileOutputStream fileOutputStream=new FileOutputStream(files))
            {
                byte[] b=text.getBytes();
                fileOutputStream.write(b);
            }
            catch(Exception ee)
            {
                ee.printStackTrace();
            }
        }

    }
    void fontfile()
    {
    font_frame=new JFrame("Choose font");
    font_frame.setSize(400,400);
    font_frame.setLocationRelativeTo(jFrame);
    font_frame.setLayout(null);

    String fonts[] = GraphicsEnvironment.getLocalGraphicsEnvironment().getAvailableFontFamilyNames();
    font_family=new JComboBox(fonts);
    font_family.setBounds(20,20,100,30);
    font_frame.add(font_family);


    String[] sizes={"8","10","12","14","16","18","20","22","24","26","30","40","50","60","80"};
    font_size=new JComboBox(sizes);
    font_size.setBounds(130,20,100,30);
    font_frame.add(font_size);

    String styles[]={"plain","narrow","bold","itelic"};
    font_style=new JComboBox(styles);
    font_style.setBounds(240,20,100,30);
    font_frame.add(font_style);

    ok=new JButton("OK");
    ok.setBounds(190,200,50,50);
    ok.addActionListener(this);
    font_frame.add(ok);

    font_frame.setVisible(true);
    }
    void fontopenfile()
    {
        String fontfamily=(String)font_family.getSelectedItem();
        String fontsize=(String)font_size.getSelectedItem();
        String fontstyle=(String)font_style.getSelectedItem();
        int style = 0;
        if (fontstyle.equals("plain"))
        {
            style=0;
        }
        else if (fontstyle.equals("bold"))
        {
            style=1;
        }
        else if (fontstyle.equals("itelic"))
        {
            style=2;

        }
        else if (fontstyle.equals("narrow"))
        {
            style=3;
        }

        Font font=new Font(fontfamily,style,Integer.parseInt(fontsize));
        jt.setFont(font);

    }


    @Override
    public void windowOpened(WindowEvent e) {

    }

    @Override
    public void windowClosing(WindowEvent e) {
     String text=jt.getText();
     if (!text.equals(""))
     {
         int i=JOptionPane.showConfirmDialog(jFrame,"Dou you save to this file ?");
         if (i==0)
         {
             saveAsfile();
         }
         else if (i==1)
         {
             System.exit(0);
         }
     }
    }

    @Override
    public void windowClosed(WindowEvent e) {

    }

    @Override
    public void windowIconified(WindowEvent e) {

    }

    @Override
    public void windowDeiconified(WindowEvent e) {

    }

    @Override
    public void windowActivated(WindowEvent e) {

    }

    @Override
    public void windowDeactivated(WindowEvent e) {
    }
}

